// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model products {
  product_id Int @id @default(autoincrement())
  product_name String @unique @db.Text
  price Decimal @db.Decimal(12,2)
  stock_available Int @db.Integer 
  brand brands @relation(fields:[brand_id], references: [brand_id], onDelete: NoAction, onUpdate: NoAction)
  brand_id Int 
  images product_images[]
  admin admin @relation(fields: [created_by], references: [admin_id],onDelete: SetNull, onUpdate: NoAction)
  created_by Int
  category categories @relation(fields: [category_id], references: [category_id],onDelete: NoAction,onUpdate: NoAction)
  category_id Int 
  description String
  deleted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model brands {
  brand_id Int @id @default(autoincrement())
  brand_name String @unique
  products products[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model categories {
  category_id Int @id @default(autoincrement())
  category_name String @unique
  products products[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model product_images {
  image_id Int @id @default(autoincrement())
  product products @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction)
  product_id Int
  cloudinary_public_id String @db.Text
  image_url String @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model admin {
  admin_id Int @id @default(autoincrement())
  username String @db.Char(60)
  products products[]
  email String @unique @db.VarChar(100)
  password String @db.VarChar()
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model user {
  user_id Int @id @default(autoincrement())
  username String @db.Char(60)
  email String @unique @db.VarChar(100)
  password String @db.VarChar()
  deleted Boolean @db.Boolean
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}


